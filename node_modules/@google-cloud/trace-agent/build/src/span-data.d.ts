import { SpanType } from './constants';
import { RootSpan, Span, SpanOptions, TraceContext } from './plugin-types';
import { Trace, TraceSpan } from './trace';
import * as traceUtil from './util';
/**
 * Represents a real trace span.
 */
export declare abstract class BaseSpanData implements Span {
    readonly trace: Trace;
    readonly span: TraceSpan;
    abstract readonly type: SpanType;
    /**
     * Creates a trace context object.
     * @param trace The object holding the spans comprising this trace.
     * @param spanName The name of the span.
     * @param parentSpanId The ID of the parent span, or '0' to specify that there
     *                     is none.
     * @param skipFrames the number of frames to remove from the top of the stack
     *                   when collecting the stack trace.
     */
    constructor(trace: Trace, spanName: string, parentSpanId: string, skipFrames: number);
    getTraceContext(): {
        traceId: string;
        spanId: string;
        options: number;
    };
    addLabel(key: string, value: any): void;
    endSpan(timestamp?: Date): void;
}
/**
 * Represents a real root span, which corresponds to an incoming request.
 */
export declare class RootSpanData extends BaseSpanData implements RootSpan {
    readonly type = SpanType.ROOT;
    private children;
    constructor(trace: Trace, spanName: string, parentSpanId: string, skipFrames: number);
    createChildSpan(options?: SpanOptions): Span;
    endSpan(timestamp?: Date): void;
}
/**
 * Represents a real child span, which corresponds to an outgoing RPC.
 */
export declare class ChildSpanData extends BaseSpanData {
    readonly type = SpanType.CHILD;
    shouldSelfPublish: boolean;
    constructor(trace: Trace, spanName: string, parentSpanId: string, skipFrames: number);
    endSpan(timestamp?: Date): void;
}
/**
 * Helper (and base) class for UntracedRootSpanData. Represents an untraced
 * child span.
 */
declare class UntracedSpanData implements Span {
    readonly type = SpanType.UNSAMPLED;
    protected readonly traceContext: TraceContext;
    constructor(traceId: string);
    getTraceContext(): traceUtil.TraceContext | null;
    addLabel(): void;
    endSpan(): void;
}
/**
 * Represents an "untraced" root span (aka not published).
 * For distributed trace context propagation purposes.
 */
export declare class UntracedRootSpanData extends UntracedSpanData implements RootSpan {
    private child;
    createChildSpan(): Span;
}
/**
 * A virtual trace span that indicates that a real child span couldn't be
 * created because the correct root span couldn't be determined.
 */
export declare const UNCORRELATED_CHILD_SPAN: Span & {
    readonly type: SpanType.UNCORRELATED;
};
/**
 * A virtual trace span that indicates that a real child span couldn't be
 * created because the Trace Agent was disabled.
 */
export declare const DISABLED_CHILD_SPAN: Span & {
    readonly type: SpanType.DISABLED;
};
/**
 * A virtual trace span that indicates that a real root span couldn't be
 * created because an active root span context already exists.
 */
export declare const UNCORRELATED_ROOT_SPAN: Readonly<{
    createChildSpan(): Span & {
        readonly type: SpanType.UNCORRELATED;
    };
} & Span & {
    readonly type: SpanType.UNCORRELATED;
}>;
/**
 * A virtual trace span that indicates that a real root span couldn't be
 * created because it was disallowed by user configuration.
 */
export declare const DISABLED_ROOT_SPAN: Readonly<{
    createChildSpan(): Span & {
        readonly type: SpanType.DISABLED;
    };
} & Span & {
    readonly type: SpanType.DISABLED;
}>;
export {};
