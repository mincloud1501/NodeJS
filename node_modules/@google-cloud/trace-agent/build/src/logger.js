"use strict";
// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const consoleLogLevel = require("console-log-level");
const config_1 = require("./config");
/**
 * The list of log levels.
 */
exports.LEVELS = [
    'silent',
    'error',
    'warn',
    'info',
    'debug',
];
function logLevelToName(level) {
    if (typeof level === 'string') {
        level = Number(level);
    }
    if (typeof level !== 'number') {
        level = config_1.defaultConfig.logLevel;
    }
    if (level < 0)
        level = 0;
    if (level >= exports.LEVELS.length)
        level = exports.LEVELS.length - 1;
    return exports.LEVELS[level];
}
class Logger {
    constructor(opts) {
        const levelName = opts && opts.level !== undefined
            ? opts.level
            : logLevelToName(config_1.defaultConfig.logLevel);
        if (levelName === false || levelName === 'silent') {
            this.logger = null;
            return;
        }
        this.logger = consoleLogLevel({
            stderr: true,
            prefix: `${opts && opts.tag ? opts.tag : 'unknown'} ${levelName.toUpperCase()}`,
            level: levelName,
        });
    }
    error(...args) {
        if (this.logger) {
            this.logger.error(...args);
        }
    }
    warn(...args) {
        if (this.logger) {
            this.logger.warn(...args);
        }
    }
    debug(...args) {
        if (this.logger) {
            this.logger.debug(...args);
        }
    }
    info(...args) {
        if (this.logger) {
            this.logger.info(...args);
        }
    }
}
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map