/// <reference types="node" />
import { EventEmitter } from 'events';
import { CLS, Func } from './base';
/**
 * An implementation of continuation-local storage on top of the async_hooks
 * module.
 */
export declare class AsyncHooksCLS<Context extends {}> implements CLS<Context> {
    private readonly defaultContext;
    private ah;
    /** A map of AsyncResource IDs to Context objects. */
    private contexts;
    /** The AsyncHook that proactively populates entries in this.contexts. */
    private hook;
    /** Whether this instance is enabled. */
    private enabled;
    constructor(defaultContext: Context);
    isEnabled(): boolean;
    enable(): void;
    disable(): void;
    getContext(): Context;
    runWithContext<T>(fn: Func<T>, value: Context): T;
    bindWithCurrentContext<T>(fn: Func<T>): Func<T>;
    patchEmitterToPropagateContext(ee: EventEmitter): void;
}
