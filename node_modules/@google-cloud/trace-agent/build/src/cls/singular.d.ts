/// <reference types="node" />
import { EventEmitter } from 'events';
import { CLS, Func } from './base';
/**
 * A trivial implementation of continuation-local storage where everything is
 * in the same continuation. Therefore, only one unique value can be stored at
 * a time.
 */
export declare class SingularCLS<Context> implements CLS<Context> {
    private readonly defaultContext;
    private enabled;
    private currentContext;
    constructor(defaultContext: Context);
    isEnabled(): boolean;
    enable(): void;
    disable(): void;
    getContext(): Context;
    runWithContext<T>(fn: Func<T>, value: Context): T;
    bindWithCurrentContext<T>(fn: Func<T>): Func<T>;
    patchEmitterToPropagateContext(ee: EventEmitter): void;
}
